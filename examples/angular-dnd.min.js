function dndData(){"use strict";
////////////
function a(){return null!==g}function b(a,b,c){f=a,g=b,h=c}function c(){return f}function d(){g.dragDrop(),g.dragEnd(h)}function e(){f=null,g=null,h=null}var f=null,g=null,h=null,i={isDragging:a,setData:b,getData:c,delData:e,dropData:d};return i}function dndDraggable(a,b){"use strict";function c(){function c(c,d){g(d),b.setData(f(),h,c),"function"==typeof h.dndModel.dragStart?h.dndModel.dragStart(c):h.dndModel.debug&&a.info('dndDraggabale: no "dragStart(element)"   function in model: default to do-nothing.')}function d(){"function"==typeof h.dndModel.dragDrop?h.dndModel.dragDrop(b.getData()):h.dndModel.debug&&a.info('dndDraggabale: no "dragDrop(data)"       function in model: default to do-nothing')}function e(c){b.delData(),"function"==typeof h.dndModel.dragEnd?h.dndModel.dragEnd(c):h.dndModel.debug&&a.info('dndDraggable:  no "dragEnd(element)"     function in model: default to do-nothing')}function f(){return"function"==typeof h.dndModel.data?h.dndModel.data():(h.dndModel.debug&&a.info('dndDraggable:  no "data()"               function in model: default to null'),null)}
// location of dataTransfer depends on whether jquery is present
function g(b){"dataTransfer"in b?b.dataTransfer.setData("text",""):"originalEvent"in b&&"dataTransfer"in b.originalEvent?b.originalEvent.dataTransfer.setData("text",""):a.error("dndDraggable could not set the dataTransfer data!")}/* jshint validthis: true */
var h=this;h.dragStart=c,h.dragEnd=e,h.dragDrop=d,
// check client model is present
null===h.dndModel&&a.error('dndDraggabale directive needs a model! e.g. <div dnd-draggable="vm.myDndModel">')}function d(c,d,e,f){function g(){return"function"==typeof f.dndModel.isDraggable?f.dndModel.isDraggable:(f.dndModel.debug&&a.info('dndDraggabale: no "isDraggable()"        function in model: default to true'),function(){return!0})}
// watch draggable property of client model
c.$watch(g(),function(){d.attr("draggable",g()())}),
// listen to drag-related events...
d.on("dragstart",function(a){
// guard against selected text
!b.isDragging()&&g()()&&f.dragStart(d,a)}),d.on("dragend",function(){
// guard against selected text
b.isDragging()&&f.dragEnd(d)})}var e={restrict:"A",scope:{dndModel:"=dndDraggable"},link:d,controller:c,controllerAs:"vm",bindToController:!0};return e}function dndDroppable(a,b,c){"use strict";function d(){function b(b,c){i=null,g()&&(c.preventDefault(),"function"==typeof h.dndModel.dragEnter?h.dndModel.dragEnter(b):h.dndModel.debug&&a.info('dndDroppable:  no "dragEnter(element)"   function in model: default to do-nothing'))}function d(a){g()&&a.preventDefault()}function e(b){g()&&("function"==typeof h.dndModel.dragLeave?h.dndModel.dragLeave(b):h.dndModel.debug&&a.info('dndDroppable:  no "dragLeave(element)"   function in model: default to do-nothing'))}function f(b){if(g()){b.preventDefault();var d=c.getData();c.dropData(),"function"==typeof h.dndModel.dragDrop?h.dndModel.dragDrop(d):h.dndModel.debug&&a.info('dndDroppable:  no "dragDrop(data)"       function in model: default to do-nothing')}}function g(){return null===i&&(c.isDragging()?"function"==typeof h.dndModel.isDroppable?i=h.dndModel.isDroppable(c.getData()):(h.dndModel.debug&&a.info('dndDroppable:  no "isDroppable(data)"    function in model: default to true'),i=!0):i=!1),i}/* jshint validthis: true */
var h=this;h.dragEnter=b,h.dragOver=d,h.dragLeave=e,h.dragDrop=f,
// check client model is present
null===h.dndModel&&a.error('dndDroppable directive needs a model! e.g. <div dnd-droppable="vm.myDndModel">');var i=!1}function e(a,c,d,e){function f(){b.cancel(g),//cancel before overwriting
g=b(function(){e.dragLeave(c),h=0},500)}var g,h=0;
// listen to drag-related events...
c.on("dragenter",function(a){h++,1===h&&e.dragEnter(c,a)}),c.on("dragleave",function(){h--,0===h?(b.cancel(g),e.dragLeave(c)):f()}),c.on("drop",function(a){e.dragDrop(a),e.dragLeave(c),h=0}),c.on("dragover",function(a){b.cancel(g),e.dragOver(a)})}var f={restrict:"A",scope:{dndModel:"=dndDroppable"},link:e,controller:d,controllerAs:"vm",bindToController:!0};return f}angular.module("ngDnd",[]),angular.module("ngDnd").service("dndData",dndData),angular.module("ngDnd").directive("dndDraggable",["$log","dndData",dndDraggable]),angular.module("ngDnd").directive("dndDroppable",["$log","$timeout","dndData",dndDroppable]);